{"ast":null,"code":"'use strict';function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}import EventEmitter from\"../emitter/EventEmitter\";import EventSubscriptionVendor from\"../emitter/EventSubscriptionVendor\";var __DEV__=process.env.NODE_ENV!=='production';function checkNativeEventModule(eventType){if(eventType){if(eventType==='appStateDidChange'||eventType==='memoryWarning'){throw new Error('`'+eventType+'` event should be registered via the AppState module');}}}var RCTDeviceEventEmitter=function(_EventEmitter){_inheritsLoose(RCTDeviceEventEmitter,_EventEmitter);function RCTDeviceEventEmitter(){var _this;var sharedSubscriber=new EventSubscriptionVendor();_this=_EventEmitter.call(this,sharedSubscriber)||this;_this.sharedSubscriber=sharedSubscriber;return _this;}var _proto=RCTDeviceEventEmitter.prototype;_proto.addListener=function addListener(eventType,listener,context){if(__DEV__){checkNativeEventModule(eventType);}return _EventEmitter.prototype.addListener.call(this,eventType,listener,context);};_proto.removeAllListeners=function removeAllListeners(eventType){if(__DEV__){checkNativeEventModule(eventType);}_EventEmitter.prototype.removeAllListeners.call(this,eventType);};_proto.removeSubscription=function removeSubscription(subscription){if(subscription.emitter!==this){subscription.emitter.removeSubscription(subscription);}else{_EventEmitter.prototype.removeSubscription.call(this,subscription);}};return RCTDeviceEventEmitter;}(EventEmitter);export default new RCTDeviceEventEmitter();","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter.js"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","EventEmitter","EventSubscriptionVendor","__DEV__","process","env","NODE_ENV","checkNativeEventModule","eventType","Error","RCTDeviceEventEmitter","_EventEmitter","_this","sharedSubscriber","call","_proto","addListener","listener","context","removeAllListeners","removeSubscription","subscription","emitter"],"mappings":"AASA,aAEA,QAASA,CAAAA,cAAT,CAAwBC,QAAxB,CAAkCC,UAAlC,CAA8C,CAAED,QAAQ,CAACE,SAAT,CAAqBC,MAAM,CAACC,MAAP,CAAcH,UAAU,CAACC,SAAzB,CAArB,CAA0DF,QAAQ,CAACE,SAAT,CAAmBG,WAAnB,CAAiCL,QAAjC,CAA2CA,QAAQ,CAACM,SAAT,CAAqBL,UAArB,CAAkC,CAEvL,MAAOM,CAAAA,YAAP,+BACA,MAAOC,CAAAA,uBAAP,0CAEA,GAAIC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAvC,CAEA,QAASC,CAAAA,sBAAT,CAAgCC,SAAhC,CAA2C,CACzC,GAAIA,SAAJ,CAAe,CACb,GAAIA,SAAS,GAAK,mBAAd,EAAqCA,SAAS,GAAK,eAAvD,CAAwE,CACtE,KAAM,IAAIC,CAAAA,KAAJ,CAAU,IAAMD,SAAN,CAAkB,sDAA5B,CAAN,CACD,CACF,CACF,CAOD,GAAIE,CAAAA,qBAAqB,CAEzB,SAAUC,aAAV,CAAyB,CACvBlB,cAAc,CAACiB,qBAAD,CAAwBC,aAAxB,CAAd,CAEA,QAASD,CAAAA,qBAAT,EAAiC,CAC/B,GAAIE,CAAAA,KAAJ,CAEA,GAAIC,CAAAA,gBAAgB,CAAG,GAAIX,CAAAA,uBAAJ,EAAvB,CACAU,KAAK,CAAGD,aAAa,CAACG,IAAd,CAAmB,IAAnB,CAAyBD,gBAAzB,GAA8C,IAAtD,CACAD,KAAK,CAACC,gBAAN,CAAyBA,gBAAzB,CACA,MAAOD,CAAAA,KAAP,CACD,CAED,GAAIG,CAAAA,MAAM,CAAGL,qBAAqB,CAACd,SAAnC,CAEAmB,MAAM,CAACC,WAAP,CAAqB,QAASA,CAAAA,WAAT,CAAqBR,SAArB,CAAgCS,QAAhC,CAA0CC,OAA1C,CAAmD,CACtE,GAAIf,OAAJ,CAAa,CACXI,sBAAsB,CAACC,SAAD,CAAtB,CACD,CAED,MAAOG,CAAAA,aAAa,CAACf,SAAd,CAAwBoB,WAAxB,CAAoCF,IAApC,CAAyC,IAAzC,CAA+CN,SAA/C,CAA0DS,QAA1D,CAAoEC,OAApE,CAAP,CACD,CAND,CAQAH,MAAM,CAACI,kBAAP,CAA4B,QAASA,CAAAA,kBAAT,CAA4BX,SAA5B,CAAuC,CACjE,GAAIL,OAAJ,CAAa,CACXI,sBAAsB,CAACC,SAAD,CAAtB,CACD,CAEDG,aAAa,CAACf,SAAd,CAAwBuB,kBAAxB,CAA2CL,IAA3C,CAAgD,IAAhD,CAAsDN,SAAtD,EACD,CAND,CAQAO,MAAM,CAACK,kBAAP,CAA4B,QAASA,CAAAA,kBAAT,CAA4BC,YAA5B,CAA0C,CACpE,GAAIA,YAAY,CAACC,OAAb,GAAyB,IAA7B,CAAmC,CACjCD,YAAY,CAACC,OAAb,CAAqBF,kBAArB,CAAwCC,YAAxC,EACD,CAFD,IAEO,CACLV,aAAa,CAACf,SAAd,CAAwBwB,kBAAxB,CAA2CN,IAA3C,CAAgD,IAAhD,CAAsDO,YAAtD,EACD,CACF,CAND,CAQA,MAAOX,CAAAA,qBAAP,CACD,CAvCD,CAuCET,YAvCF,CAFA,CA2CA,cAAe,IAAIS,CAAAA,qBAAJ,EAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport EventEmitter from '../emitter/EventEmitter';\nimport EventSubscriptionVendor from '../emitter/EventSubscriptionVendor';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nfunction checkNativeEventModule(eventType) {\n  if (eventType) {\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\n\n\nvar RCTDeviceEventEmitter =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inheritsLoose(RCTDeviceEventEmitter, _EventEmitter);\n\n  function RCTDeviceEventEmitter() {\n    var _this;\n\n    var sharedSubscriber = new EventSubscriptionVendor();\n    _this = _EventEmitter.call(this, sharedSubscriber) || this;\n    _this.sharedSubscriber = sharedSubscriber;\n    return _this;\n  }\n\n  var _proto = RCTDeviceEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    return _EventEmitter.prototype.addListener.call(this, eventType, listener, context);\n  };\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n\n    _EventEmitter.prototype.removeAllListeners.call(this, eventType);\n  };\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      _EventEmitter.prototype.removeSubscription.call(this, subscription);\n    }\n  };\n\n  return RCTDeviceEventEmitter;\n}(EventEmitter);\n\nexport default new RCTDeviceEventEmitter();"]},"metadata":{},"sourceType":"module"}