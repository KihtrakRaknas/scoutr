{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import GestureHandler from\"./GestureHandler\";var IndiscreteGestureHandler=function(_GestureHandler){_inherits(IndiscreteGestureHandler,_GestureHandler);function IndiscreteGestureHandler(){_classCallCheck(this,IndiscreteGestureHandler);return _possibleConstructorReturn(this,_getPrototypeOf(IndiscreteGestureHandler).apply(this,arguments));}_createClass(IndiscreteGestureHandler,[{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref){var _ref$minPointers=_ref.minPointers,minPointers=_ref$minPointers===void 0?2:_ref$minPointers,_ref$maxPointers=_ref.maxPointers,maxPointers=_ref$maxPointers===void 0?2:_ref$maxPointers,props=_objectWithoutProperties(_ref,[\"minPointers\",\"maxPointers\"]);return _get(_getPrototypeOf(IndiscreteGestureHandler.prototype),\"updateGestureConfig\",this).call(this,_objectSpread({minPointers:minPointers,maxPointers:maxPointers},props));}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_ref2,recognizer,_ref3){var minPointers=_ref2.minPointers,maxPointers=_ref2.maxPointers;var pointerLength=_ref3.maxPointers;if(pointerLength>maxPointers){return{failed:true};}var validPointerCount=pointerLength>=minPointers;return{success:validPointerCount};}},{key:\"shouldEnableGestureOnSetup\",get:function get(){return false;}}]);return IndiscreteGestureHandler;}(GestureHandler);export default IndiscreteGestureHandler;","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-gesture-handler/web/IndiscreteGestureHandler.js"],"names":["GestureHandler","IndiscreteGestureHandler","minPointers","maxPointers","props","recognizer","pointerLength","failed","validPointerCount","success"],"mappings":"ozCAAA,MAAOA,CAAAA,cAAP,wB,GAKMC,CAAAA,wB,qXAKgE,2BAA9CC,WAA8C,CAA9CA,WAA8C,2BAAhC,CAAgC,wCAA7BC,WAA6B,CAA7BA,WAA6B,2BAAf,CAAe,kBAATC,KAAS,8DAClE,qHACEF,WAAW,CAAXA,WADF,CAEEC,WAAW,CAAXA,WAFF,EAGKC,KAHL,GAKD,C,gFAICC,U,OAEA,IAHEH,CAAAA,WAGF,OAHEA,WAGF,CAHeC,WAGf,OAHeA,WAGf,IADeG,CAAAA,aACf,OADEH,WACF,CACA,GAAIG,aAAa,CAAGH,WAApB,CAAiC,CAC/B,MAAO,CAAEI,MAAM,CAAE,IAAV,CAAP,CACD,CACD,GAAMC,CAAAA,iBAAiB,CAAGF,aAAa,EAAIJ,WAA3C,CACA,MAAO,CACLO,OAAO,CAAED,iBADJ,CAAP,CAGD,C,sDAxBgC,CAC/B,MAAO,MAAP,CACD,C,sCAHoCR,c,EA2BvC,cAAeC,CAAAA,wBAAf","sourcesContent":["import GestureHandler from './GestureHandler';\n\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */\nclass IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n    return super.updateGestureConfig({\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers },\n    recognizer,\n    { maxPointers: pointerLength }\n  ) {\n    if (pointerLength > maxPointers) {\n      return { failed: true };\n    }\n    const validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount,\n    };\n  }\n}\nexport default IndiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}