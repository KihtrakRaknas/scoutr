{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import PropTypes from'prop-types';import deepmerge from'deepmerge';import colors from\"./colors\";export var ThemeContext=React.createContext({theme:{colors:colors}});var ThemeProvider=function(_React$Component){_inherits(ThemeProvider,_React$Component);function ThemeProvider(props){var _this;_classCallCheck(this,ThemeProvider);_this=_possibleConstructorReturn(this,_getPrototypeOf(ThemeProvider).call(this,props));_this.updateTheme=function(updates){_this.setState(function(_ref){var theme=_ref.theme;return{theme:deepmerge(theme,updates)};});};_this.replaceTheme=function(theme){_this.setState(function(){return{theme:deepmerge(_this.defaultTheme,theme)};});};_this.getTheme=function(){return _this.state.theme;};_this.defaultTheme=deepmerge({colors:colors},props.theme);_this.state={theme:_this.defaultTheme};return _this;}_createClass(ThemeProvider,[{key:\"render\",value:function render(){return React.createElement(ThemeContext.Provider,{value:{theme:this.state.theme,updateTheme:this.updateTheme,replaceTheme:this.replaceTheme}},this.props.children);}}]);return ThemeProvider;}(React.Component);export{ThemeProvider as default};ThemeProvider.propTypes={theme:PropTypes.object,children:PropTypes.node.isRequired};ThemeProvider.defaultProps={theme:{}};export var ThemeConsumer=ThemeContext.Consumer;","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["React","PropTypes","deepmerge","colors","ThemeContext","createContext","theme","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","children","Component","propTypes","object","node","isRequired","defaultProps","ThemeConsumer","Consumer"],"mappings":"mVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CAEA,MAAOC,CAAAA,MAAP,gBAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACK,aAAN,CAAoB,CAC9CC,KAAK,CAAE,CACLH,MAAM,CAANA,MADK,CADuC,CAApB,CAArB,C,GAMcI,CAAAA,a,sEACnB,uBAAYC,KAAZ,CAAmB,+CACjB,+EAAMA,KAAN,GADiB,MAcnBC,WAdmB,CAcL,SAAAC,OAAO,CAAI,CACvB,MAAKC,QAAL,CAAc,kBAAGL,CAAAA,KAAH,MAAGA,KAAH,OAAgB,CAC5BA,KAAK,CAAEJ,SAAS,CAACI,KAAD,CAAQI,OAAR,CADY,CAAhB,EAAd,EAGD,CAlBkB,OAoBnBE,YApBmB,CAoBJ,SAAAN,KAAK,CAAI,CACtB,MAAKK,QAAL,CAAc,iBAAO,CACnBL,KAAK,CAAEJ,SAAS,CAAC,MAAKW,YAAN,CAAoBP,KAApB,CADG,CAAP,EAAd,EAGD,CAxBkB,OA0BnBQ,QA1BmB,CA0BR,iBAAM,OAAKC,KAAL,CAAWT,KAAjB,EA1BQ,CAGjB,MAAKO,YAAL,CAAoBX,SAAS,CAC3B,CACEC,MAAM,CAANA,MADF,CAD2B,CAI3BK,KAAK,CAACF,KAJqB,CAA7B,CAMA,MAAKS,KAAL,CAAa,CACXT,KAAK,CAAE,MAAKO,YADD,CAAb,CATiB,aAYlB,C,iEAgBQ,CACP,MACE,qBAAC,YAAD,CAAc,QAAd,EACE,KAAK,CAAE,CACLP,KAAK,CAAE,KAAKS,KAAL,CAAWT,KADb,CAELG,WAAW,CAAE,KAAKA,WAFb,CAGLG,YAAY,CAAE,KAAKA,YAHd,CADT,EAOG,KAAKJ,KAAL,CAAWQ,QAPd,CADF,CAWD,C,2BAzCwChB,KAAK,CAACiB,S,SAA5BV,a,aA4CrBA,aAAa,CAACW,SAAd,CAA0B,CACxBZ,KAAK,CAAEL,SAAS,CAACkB,MADO,CAExBH,QAAQ,CAAEf,SAAS,CAACmB,IAAV,CAAeC,UAFD,CAA1B,CAKAd,aAAa,CAACe,YAAd,CAA6B,CAC3BhB,KAAK,CAAE,EADoB,CAA7B,CAIA,MAAO,IAAMiB,CAAAA,aAAa,CAAGnB,YAAY,CAACoB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultTheme = deepmerge(\n      {\n        colors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n    };\n  }\n\n  updateTheme = updates => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = theme => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}