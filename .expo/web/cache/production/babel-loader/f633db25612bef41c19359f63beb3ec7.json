{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import withNavigation from\"./withNavigation\";var EventNameToPropName={willFocus:'onWillFocus',didFocus:'onDidFocus',willBlur:'onWillBlur',didBlur:'onDidBlur'};var EventNames=Object.keys(EventNameToPropName);var NavigationEvents=function(_React$Component){_inherits(NavigationEvents,_React$Component);function NavigationEvents(){var _getPrototypeOf2;var _this;_classCallCheck(this,NavigationEvents);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(NavigationEvents)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.getPropListener=function(eventName){return _this.props[EventNameToPropName[eventName]];};return _this;}_createClass(NavigationEvents,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.subscriptions={};EventNames.forEach(function(eventName){_this2.subscriptions[eventName]=_this2.props.navigation.addListener(eventName,function(){var propListener=_this2.getPropListener(eventName);return propListener&&propListener.apply(void 0,arguments);});});}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this3=this;EventNames.forEach(function(eventName){_this3.subscriptions[eventName].remove();});}},{key:\"render\",value:function render(){return null;}}]);return NavigationEvents;}(React.Component);export default withNavigation(NavigationEvents);","map":{"version":3,"sources":["NavigationEvents.js"],"names":["EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","NavigationEvents","React","Component","getPropListener","propListener","withNavigation"],"mappings":"mVAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,cAAA,wBAEA,GAAMA,CAAAA,mBAAmB,CAAG,CAC1BC,SAAS,CADiB,aAAA,CAE1BC,QAAQ,CAFkB,YAAA,CAG1BC,QAAQ,CAHkB,YAAA,CAI1BC,OAAO,CAJT,WAA4B,CAA5B,CAOA,GAAMC,CAAAA,UAAU,CAAGC,MAAM,CAANA,IAAAA,CAAnB,mBAAmBA,CAAnB,CAEMC,GAAAA,CAAAA,gB,saACJG,e,CAAkB,SAAA,SAAA,CAAS,CAAA,MAAI,CAAA,KAAA,CAAA,KAAA,CAAWV,mBAAmB,CAAlC,SAAkC,CAA9B,CAAJ,C,0GAEP,CAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAClB,KAAA,aAAA,CAAA,EAAA,CAKAK,UAAU,CAAVA,OAAAA,CAAmB,SAAA,SAAA,CAAa,CAC9B,MAAI,CAAJ,aAAA,CAAA,SAAA,EAAgC,MAAI,CAAJ,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,SAAA,CAE9B,UAAa,CACX,GAAMM,CAAAA,YAAY,CAAG,MAAI,CAAJ,eAAA,CAArB,SAAqB,CAArB,CACA,MAAOA,CAAAA,YAAY,EAAIA,YAAY,CAAZA,KAAAA,CAAAA,IAAAA,EAAAA,CAAvB,SAAuBA,CAAvB,CAJJ,CAAgC,CAAhC,CADFN,CAAAA,E,oEAWqB,CAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CACrBA,UAAU,CAAVA,OAAAA,CAAmB,SAAA,SAAA,CAAa,CAC9B,MAAI,CAAJ,aAAA,CAAA,SAAA,EAAA,MAAA,GADFA,CAAAA,E,wCAKO,CACP,MAAA,KAAA,C,+BA3B2BG,KAAK,CAACC,S,CAA/BF,CA+BN,cAAeK,CAAAA,cAAc,CAA7B,gBAA6B,CAA7B","sourcesContent":["import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  getPropListener = eventName => this.props[EventNameToPropName[eventName]];\n\n  componentDidMount() {\n    this.subscriptions = {};\n\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}