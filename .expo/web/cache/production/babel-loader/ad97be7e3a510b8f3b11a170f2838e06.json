{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/TouchableItem.tsx\";import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import TouchableNativeFeedback from\"react-native-web/dist/exports/TouchableNativeFeedback\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import View from\"react-native-web/dist/exports/View\";import BorderlessButton from\"./BorderlessButton\";var ANDROID_VERSION_LOLLIPOP=21;var TouchableItem=function(_React$Component){_inherits(TouchableItem,_React$Component);function TouchableItem(){_classCallCheck(this,TouchableItem);return _possibleConstructorReturn(this,_getPrototypeOf(TouchableItem).apply(this,arguments));}_createClass(TouchableItem,[{key:\"render\",value:function render(){if(Platform.OS==='android'&&Platform.Version>=ANDROID_VERSION_LOLLIPOP){var _this$props=this.props,style=_this$props.style,pressColor=_this$props.pressColor,borderless=_this$props.borderless,children=_this$props.children,rest=_objectWithoutProperties(_this$props,[\"style\",\"pressColor\",\"borderless\",\"children\"]);return React.createElement(TouchableNativeFeedback,_extends({},rest,{useForeground:TouchableNativeFeedback.canUseNativeForeground(),background:TouchableNativeFeedback.Ripple(pressColor,borderless),__source:{fileName:_jsxFileName,lineNumber:53}}),React.createElement(View,{style:style,__source:{fileName:_jsxFileName,lineNumber:58}},React.Children.only(children)));}else if(Platform.OS==='ios'){return React.createElement(BorderlessButton,_extends({hitSlop:{top:10,bottom:10,right:10,left:10},disallowInterruption:true,enabled:!this.props.disabled},this.props,{__source:{fileName:_jsxFileName,lineNumber:63}}),this.props.children);}else{return React.createElement(TouchableOpacity,_extends({},this.props,{__source:{fileName:_jsxFileName,lineNumber:74}}),this.props.children);}}}]);return TouchableItem;}(React.Component);TouchableItem.defaultProps={borderless:false,pressColor:'rgba(0, 0, 0, .32)'};export{TouchableItem as default};","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","React","Component","defaultProps","borderless","pressColor","Platform","style","children","rest","TouchableNativeFeedback","top","bottom","right","left"],"mappings":"2kBASA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,0RASA,MAAA,CAAA,gBAAA,0BAUA,GAAMA,CAAAA,wBAAwB,CAA9B,EAAA,CAEqBC,GAAAA,CAAAA,a,kSAMV,CASP,GACEM,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,EACAA,QAAQ,CAARA,OAAAA,EAFF,wBAAA,CAGE,CAAA,GAAA,CAAA,WAAA,CAC6D,KAD7D,KAAA,CACQC,KADR,CAAA,WAAA,CAAA,KAAA,CACeF,UADf,CAAA,WAAA,CAAA,UAAA,CAC2BD,UAD3B,CAAA,WAAA,CAAA,UAAA,CACuCI,QADvC,CAAA,WAAA,CAAA,QAAA,CACoDC,IADpD,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,OAAA,CAAA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,CAAA,CAGA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,aAAa,CAAEC,uBAAuB,CAFxC,sBAEiBA,EAFjB,CAGE,UAAU,CAAEA,uBAAuB,CAAvBA,MAAAA,CAAAA,UAAAA,CAHd,UAGcA,CAHd,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAKE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAX,KAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAqBT,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CANzB,QAMyBA,CAArB,CALF,CADF,CANF,CAAA,IAeO,IAAIK,QAAQ,CAARA,EAAAA,GAAJ,KAAA,CAA2B,CAChC,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,CACE,OAAO,CAAE,CAAEK,GAAG,CAAL,EAAA,CAAWC,MAAM,CAAjB,EAAA,CAAuBC,KAAK,CAA5B,EAAA,CAAkCC,IAAI,CADjD,EACW,CADX,CAEE,oBAAoB,CAFtB,IAAA,CAGE,OAAO,CAAE,CAAC,KAAA,KAAA,CAHZ,QAAA,CAAA,CAIM,KAJN,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAMG,KAAA,KAAA,CAPL,QACE,CADF,CADK,CAAA,IAWA,CACL,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,EAAA,CAAsB,KAAtB,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CACG,KAAA,KAAA,CAFL,QACE,CADF,CAMH,C,4BAhDwCb,KAAK,CAACC,S,CAA5BF,CAAAA,a,CACZG,YADYH,CACG,CACpBI,UAAU,CADU,KAAA,CAEpBC,UAAU,CAFU,oBAAA,CADHL,C,OAAAA,a","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\ntype Props = ViewProps & {\n  pressColor: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, pressColor, borderless, children, ...rest } = this.props;\n\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else if (Platform.OS === 'ios') {\n      return (\n        <BorderlessButton\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\n          disallowInterruption\n          enabled={!this.props.disabled}\n          {...this.props}\n        >\n          {this.props.children}\n        </BorderlessButton>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}