{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React,{PureComponent}from'react';import PropTypes from'prop-types';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";import processColor from\"react-native-web/dist/exports/processColor\";import Text from\"react-native-web/dist/exports/Text\";import ensureNativeModuleAvailable from\"./ensure-native-module-available\";import createIconButtonComponent from\"./icon-button\";import createTabBarItemIOSComponent from\"./tab-bar-item-ios\";import createToolbarAndroidComponent from\"./toolbar-android\";export var NativeIconAPI=NativeModules.RNVectorIconsManager||NativeModules.RNVectorIconsModule;export var DEFAULT_ICON_SIZE=12;export var DEFAULT_ICON_COLOR='black';export default function createIconSet(glyphMap,fontFamily,fontFile,fontStyle){var fontBasename=fontFile?fontFile.replace(/\\.(otf|ttf)$/,''):fontFamily;var fontReference=Platform.select({windows:\"Assets/\"+fontFile+\"#\"+fontFamily,android:fontBasename,web:fontBasename,default:fontFamily});var IconNamePropType=PropTypes.oneOf(Object.keys(glyphMap));var Icon=function(_PureComponent){_inherits(Icon,_PureComponent);function Icon(){var _getPrototypeOf2;var _this;_classCallCheck(this,Icon);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Icon)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.root=null;_this.handleRef=function(ref){_this.root=ref;};return _this;}_createClass(Icon,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){if(this.root){this.root.setNativeProps(nativeProps);}}},{key:\"render\",value:function render(){var _this$props=this.props,name=_this$props.name,size=_this$props.size,color=_this$props.color,style=_this$props.style,children=_this$props.children,props=_objectWithoutProperties(_this$props,[\"name\",\"size\",\"color\",\"style\",\"children\"]);var glyph=name?glyphMap[name]||'?':'';if(typeof glyph==='number'){glyph=String.fromCharCode(glyph);}var styleDefaults={fontSize:size,color:color};var styleOverrides={fontFamily:fontReference,fontWeight:'normal',fontStyle:'normal'};props.style=[styleDefaults,style,styleOverrides,fontStyle||{}];props.ref=this.handleRef;return React.createElement(Text,props,glyph,children);}}]);return Icon;}(PureComponent);Icon.propTypes={allowFontScaling:PropTypes.bool,name:IconNamePropType,size:PropTypes.number,color:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),children:PropTypes.node,style:PropTypes.any};Icon.defaultProps={size:DEFAULT_ICON_SIZE,allowFontScaling:false};var imageSourceCache={};function getImageSource(name){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_ICON_SIZE;var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_ICON_COLOR;ensureNativeModuleAvailable();var glyph=glyphMap[name]||'?';if(typeof glyph==='number'){glyph=String.fromCharCode(glyph);}var processedColor=processColor(color);var cacheKey=glyph+\":\"+size+\":\"+processedColor;var scale=PixelRatio.get();return new Promise(function(resolve,reject){var cached=imageSourceCache[cacheKey];if(typeof cached!=='undefined'){if(!cached||cached instanceof Error){reject(cached);}else{resolve({uri:cached,scale:scale});}}else{NativeIconAPI.getImageForFont(fontReference,glyph,size,processedColor,function(err,image){var error=typeof err==='string'?new Error(err):err;imageSourceCache[cacheKey]=image||error||false;if(!error&&image){resolve({uri:image,scale:scale});}else{reject(error);}});}});}function loadFont(){var file=arguments.length>0&&arguments[0]!==undefined?arguments[0]:fontFile;if(Platform.OS==='ios'){ensureNativeModuleAvailable();if(!file){return Promise.reject(new Error('Unable to load font, because no file was specified. '));}return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI,_toConsumableArray(file.split('.')));}return Promise.resolve();}function hasIcon(name){return Object.prototype.hasOwnProperty.call(glyphMap,name);}function getRawGlyphMap(){return glyphMap;}function getFontFamily(){return fontReference;}Icon.Button=createIconButtonComponent(Icon);Icon.TabBarItem=createTabBarItemIOSComponent(IconNamePropType,getImageSource);Icon.TabBarItemIOS=Icon.TabBarItem;Icon.ToolbarAndroid=createToolbarAndroidComponent(IconNamePropType,getImageSource);Icon.getImageSource=getImageSource;Icon.loadFont=loadFont;Icon.hasIcon=hasIcon;Icon.getRawGlyphMap=getRawGlyphMap;Icon.getFontFamily=getFontFamily;return Icon;}","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["React","PureComponent","PropTypes","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","propTypes","allowFontScaling","bool","number","oneOfType","string","node","any","defaultProps","imageSourceCache","getImageSource","processedColor","processColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}