{"ast":null,"code":"'use strict';import PropTypes from'prop-types';var ImageURISourcePropType=PropTypes.shape({uri:PropTypes.string,bundle:PropTypes.string,method:PropTypes.string,headers:PropTypes.objectOf(PropTypes.string),body:PropTypes.string,cache:PropTypes.oneOf(['default','reload','force-cache','only-if-cached']),width:PropTypes.number,height:PropTypes.number,scale:PropTypes.number});var ImageSourcePropType=PropTypes.oneOfType([ImageURISourcePropType,PropTypes.number,PropTypes.string,PropTypes.arrayOf(ImageURISourcePropType)]);export default ImageSourcePropType;","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-web/dist/exports/Image/ImageSourcePropType.js"],"names":["PropTypes","ImageURISourcePropType","shape","uri","string","bundle","method","headers","objectOf","body","cache","oneOf","width","number","height","scale","ImageSourcePropType","oneOfType","arrayOf"],"mappings":"AAQA,aAEA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CACA,GAAIC,CAAAA,sBAAsB,CAAGD,SAAS,CAACE,KAAV,CAAgB,CAO3CC,GAAG,CAAEH,SAAS,CAACI,MAP4B,CAc3CC,MAAM,CAAEL,SAAS,CAACI,MAdyB,CAmB3CE,MAAM,CAAEN,SAAS,CAACI,MAnByB,CAyB3CG,OAAO,CAAEP,SAAS,CAACQ,QAAV,CAAmBR,SAAS,CAACI,MAA7B,CAzBkC,CAgC3CK,IAAI,CAAET,SAAS,CAACI,MAhC2B,CAsD3CM,KAAK,CAAEV,SAAS,CAACW,KAAV,CAAgB,CAAC,SAAD,CAAY,QAAZ,CAAsB,aAAtB,CAAqC,gBAArC,CAAhB,CAtDoC,CA4D3CC,KAAK,CAAEZ,SAAS,CAACa,MA5D0B,CA6D3CC,MAAM,CAAEd,SAAS,CAACa,MA7DyB,CAmE3CE,KAAK,CAAEf,SAAS,CAACa,MAnE0B,CAAhB,CAA7B,CAqEA,GAAIG,CAAAA,mBAAmB,CAAGhB,SAAS,CAACiB,SAAV,CAAoB,CAAChB,sBAAD,CAC9CD,SAAS,CAACa,MADoC,CAC5Bb,SAAS,CAACI,MADkB,CAE9CJ,SAAS,CAACkB,OAAV,CAAkBjB,sBAAlB,CAF8C,CAApB,CAA1B,CAGA,cAAee,CAAAA,mBAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nimport PropTypes from 'prop-types';\nvar ImageURISourcePropType = PropTypes.shape({\n  /**\n   * `uri` is a string representing the resource identifier for the image, which\n   * could be an http address, a local file path, or the name of a static image\n   * resource (which should be wrapped in the `require('./path/to/image.png')`\n   * function).\n   */\n  uri: PropTypes.string,\n\n  /**\n   * `bundle` is the iOS asset bundle which the image is included in. This\n   * will default to [NSBundle mainBundle] if not set.\n   * @platform ios\n   */\n  bundle: PropTypes.string,\n\n  /**\n   * `method` is the HTTP Method to use. Defaults to GET if not specified.\n   */\n  method: PropTypes.string,\n\n  /**\n   * `headers` is an object representing the HTTP headers to send along with the\n   * request for a remote image.\n   */\n  headers: PropTypes.objectOf(PropTypes.string),\n\n  /**\n   * `body` is the HTTP body to send with the request. This must be a valid\n   * UTF-8 string, and will be sent exactly as specified, with no\n   * additional encoding (e.g. URL-escaping or base64) applied.\n   */\n  body: PropTypes.string,\n\n  /**\n   * `cache` determines how the requests handles potentially cached\n   * responses.\n   *\n   * - `default`: Use the native platforms default strategy. `useProtocolCachePolicy` on iOS.\n   *\n   * - `reload`: The data for the URL will be loaded from the originating source.\n   * No existing cache data should be used to satisfy a URL load request.\n   *\n   * - `force-cache`: The existing cached data will be used to satisfy the request,\n   * regardless of its age or expiration date. If there is no existing data in the cache\n   * corresponding the request, the data is loaded from the originating source.\n   *\n   * - `only-if-cached`: The existing cache data will be used to satisfy a request, regardless of\n   * its age or expiration date. If there is no existing data in the cache corresponding\n   * to a URL load request, no attempt is made to load the data from the originating source,\n   * and the load is considered to have failed.\n   *\n   * @platform ios\n   */\n  cache: PropTypes.oneOf(['default', 'reload', 'force-cache', 'only-if-cached']),\n\n  /**\n   * `width` and `height` can be specified if known at build time, in which case\n   * these will be used to set the default `<Image/>` component dimensions.\n   */\n  width: PropTypes.number,\n  height: PropTypes.number,\n\n  /**\n   * `scale` is used to indicate the scale factor of the image. Defaults to 1.0 if\n   * unspecified, meaning that one image pixel equates to one display point / DIP.\n   */\n  scale: PropTypes.number\n});\nvar ImageSourcePropType = PropTypes.oneOfType([ImageURISourcePropType, // Opaque type returned by require('./image.jpg')\nPropTypes.number, PropTypes.string, // Multiple sources\nPropTypes.arrayOf(ImageURISourcePropType)]);\nexport default ImageSourcePropType;"]},"metadata":{},"sourceType":"module"}