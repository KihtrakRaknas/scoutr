{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import Hammer from'hammerjs';import{Direction}from\"./constants\";import{GesturePropError}from\"./Errors\";import DraggingGestureHandler from\"./DraggingGestureHandler\";import{isnan}from\"./utils\";var FlingGestureHandler=function(_DraggingGestureHandl){_inherits(FlingGestureHandler,_DraggingGestureHandl);function FlingGestureHandler(){_classCallCheck(this,FlingGestureHandler);return _possibleConstructorReturn(this,_getPrototypeOf(FlingGestureHandler).apply(this,arguments));}_createClass(FlingGestureHandler,[{key:\"onGestureActivated\",value:function onGestureActivated(event){this.sendEvent(_objectSpread({},event,{eventType:Hammer.INPUT_MOVE,isFinal:false,isFirst:true}));this.isGestureRunning=false;this.hasGestureFailed=false;this.sendEvent(_objectSpread({},event,{eventType:Hammer.INPUT_END,isFinal:true}));}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this=this;_get(_getPrototypeOf(FlingGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(this.hasGestureFailed){return;}if(ev.isFinal){setTimeout(function(){if(_this.isGestureRunning){_this.cancelEvent(ev);}});}else if(!this.hasGestureFailed&&!this.isGestureRunning){var gesture=this.hammer.get(this.name);if(gesture.options.enable(gesture,ev)){this.onStart(ev);this.sendEvent(ev);}}}},{key:\"getHammerConfig\",value:function getHammerConfig(){return{pointers:this.config.numberOfPointers,direction:this.getDirection()};}},{key:\"getTargetDirections\",value:function getTargetDirections(direction){var directions=[];if(direction&Direction.RIGHT){directions.push(Hammer.DIRECTION_RIGHT);}if(direction&Direction.LEFT){directions.push(Hammer.DIRECTION_LEFT);}if(direction&Direction.UP){directions.push(Hammer.DIRECTION_UP);}if(direction&Direction.DOWN){directions.push(Hammer.DIRECTION_DOWN);}return directions;}},{key:\"getDirection\",value:function getDirection(){var _this$getConfig=this.getConfig(),direction=_this$getConfig.direction;var directions=[];if(direction&Direction.RIGHT){directions.push(Hammer.DIRECTION_HORIZONTAL);}if(direction&Direction.LEFT){directions.push(Hammer.DIRECTION_HORIZONTAL);}if(direction&Direction.UP){directions.push(Hammer.DIRECTION_VERTICAL);}if(direction&Direction.DOWN){directions.push(Hammer.DIRECTION_VERTICAL);}directions=_toConsumableArray(new Set(directions));if(directions.length===0)return Hammer.DIRECTION_NONE;if(directions.length===1)return directions[0];return Hammer.DIRECTION_ALL;}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_ref,recognizer,_ref2){var minPointers=_ref.minPointers,maxPointers=_ref.maxPointers,numberOfPointers=_ref.numberOfPointers,maxDist=_ref.maxDist,maxDeltaX=_ref.maxDeltaX,maxDeltaY=_ref.maxDeltaY,maxDistSq=_ref.maxDistSq,shouldCancelWhenOutside=_ref.shouldCancelWhenOutside;var pointerLength=_ref2.maxPointers,dx=_ref2.deltaX,dy=_ref2.deltaY,props=_objectWithoutProperties(_ref2,[\"maxPointers\",\"deltaX\",\"deltaY\"]);var validPointerCount=pointerLength===numberOfPointers;if(!validPointerCount&&this.isGestureRunning){return{failed:true};}return{success:validPointerCount};}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref3){var _ref3$numberOfPointer=_ref3.numberOfPointers,numberOfPointers=_ref3$numberOfPointer===void 0?1:_ref3$numberOfPointer,direction=_ref3.direction,props=_objectWithoutProperties(_ref3,[\"numberOfPointers\",\"direction\"]);if(isnan(direction)||typeof direction!=='number'){throw new GesturePropError('direction',direction,'number');}return _get(_getPrototypeOf(FlingGestureHandler.prototype),\"updateGestureConfig\",this).call(this,_objectSpread({numberOfPointers:numberOfPointers,direction:direction},props));}},{key:\"name\",get:function get(){return'swipe';}},{key:\"NativeGestureClass\",get:function get(){return Hammer.Swipe;}}]);return FlingGestureHandler;}(DraggingGestureHandler);export default FlingGestureHandler;","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-gesture-handler/web/FlingGestureHandler.js"],"names":["Hammer","Direction","GesturePropError","DraggingGestureHandler","isnan","FlingGestureHandler","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","ev","setTimeout","cancelEvent","gesture","hammer","get","name","options","enable","onStart","pointers","config","numberOfPointers","direction","getDirection","directions","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","recognizer","minPointers","maxPointers","maxDist","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","pointerLength","dx","deltaX","dy","deltaY","props","validPointerCount","failed","success","Swipe"],"mappings":"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","sourcesContent":["import Hammer from 'hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      numberOfPointers,\n      maxDist,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    },\n    recognizer,\n    { maxPointers: pointerLength, deltaX: dx, deltaY: dy, ...props }\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}