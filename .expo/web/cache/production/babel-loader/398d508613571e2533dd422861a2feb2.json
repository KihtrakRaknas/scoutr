{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";import DiscreteGestureHandler from\"./DiscreteGestureHandler\";import*as NodeManager from\"./NodeManager\";import PressGestureHandler from\"./PressGestureHandler\";import{TEST_MIN_IF_NOT_NAN,VEC_LEN_SQ}from\"./utils\";var NativeViewGestureHandler=function(_PressGestureHandler){_inherits(NativeViewGestureHandler,_PressGestureHandler);function NativeViewGestureHandler(){_classCallCheck(this,NativeViewGestureHandler);return _possibleConstructorReturn(this,_getPrototypeOf(NativeViewGestureHandler).apply(this,arguments));}_createClass(NativeViewGestureHandler,[{key:\"onRawEvent\",value:function onRawEvent(ev){var _this=this;_get(_getPrototypeOf(NativeViewGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(!ev.isFinal){if(TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({x:ev.deltaX,y:ev.deltaY}),10)){if(this.config.disallowInterruption){var gestures=Object.values(NodeManager.getNodes()).filter(function(gesture){var handlerTag=gesture.handlerTag,view=gesture.view,isGestureRunning=gesture.isGestureRunning;return handlerTag!==_this.handlerTag&&isGestureRunning&&gesture instanceof DiscreteGestureHandler&&view&&_this.view.contains(view);});for(var _iterator=gestures,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var _gesture=_ref;_gesture.forceInvalidate(ev);}}}}}}]);return NativeViewGestureHandler;}(PressGestureHandler);export default NativeViewGestureHandler;","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-gesture-handler/web/NativeViewGestureHandler.js"],"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"mappings":"gYAAA,MAAOA,CAAAA,sBAAP,gCACA,MAAO,GAAKC,CAAAA,WAAZ,qBACA,MAAOC,CAAAA,mBAAP,6BACA,OAASC,mBAAT,CAA8BC,UAA9B,e,GAEMC,CAAAA,wB,wWACOC,E,CAAI,gBACb,sFAAiBA,EAAjB,EACA,GAAI,CAACA,EAAE,CAACC,OAAR,CAAiB,CAEf,GAAIJ,mBAAmB,CAACC,UAAU,CAAC,CAAEI,CAAC,CAAEF,EAAE,CAACG,MAAR,CAAgBC,CAAC,CAAEJ,EAAE,CAACK,MAAtB,CAAD,CAAX,CAA6C,EAA7C,CAAvB,CAAyE,CACvE,GAAI,KAAKC,MAAL,CAAYC,oBAAhB,CAAsC,CACpC,GAAMC,CAAAA,QAAQ,CAAGC,MAAM,CAACC,MAAP,CAAcf,WAAW,CAACgB,QAAZ,EAAd,EAAsCC,MAAtC,CAA6C,SAAAC,OAAO,CAAI,IAC/DC,CAAAA,UAD+D,CACxBD,OADwB,CAC/DC,UAD+D,CACnDC,IADmD,CACxBF,OADwB,CACnDE,IADmD,CAC7CC,gBAD6C,CACxBH,OADwB,CAC7CG,gBAD6C,CAEvE,MAEEF,CAAAA,UAAU,GAAK,KAAI,CAACA,UAApB,EAEAE,gBAFA,EAIAH,OAAO,WAAYnB,CAAAA,sBAJnB,EAMAqB,IANA,EAOA,KAAI,CAACA,IAAL,CAAUE,QAAV,CAAmBF,IAAnB,CATF,CAWD,CAbgB,CAAjB,CAeA,kBAAsBP,QAAtB,4IAAgC,uIAArBK,CAAAA,QAAqB,MAE9BA,QAAO,CAACK,eAAR,CAAwBlB,EAAxB,EACD,CACF,CACF,CACF,CACF,C,sCA7BoCJ,mB,EAgCvC,cAAeG,CAAAA,wBAAf","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n            const { handlerTag, view, isGestureRunning } = gesture;\n            return (\n              // Check if this gesture isn't self\n              handlerTag !== this.handlerTag &&\n              // Ensure the gesture needs to be cancelled\n              isGestureRunning &&\n              // ScrollView can cancel discrete gestures like taps and presses\n              gesture instanceof DiscreteGestureHandler &&\n              // Ensure a view exists and is a child of the current view\n              view &&\n              this.view.contains(view)\n            );\n          });\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}