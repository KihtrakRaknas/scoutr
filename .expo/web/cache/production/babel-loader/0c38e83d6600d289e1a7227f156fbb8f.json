{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from\"react\";import Text from\"react-native-web/dist/exports/Text\";import*as Font from\"expo-font\";import createIconSet from\"./vendor/react-native-vector-icons/lib/create-icon-set\";import createIconButtonComponent from\"./vendor/react-native-vector-icons/lib/icon-button\";export{DEFAULT_ICON_COLOR,DEFAULT_ICON_SIZE}from\"./vendor/react-native-vector-icons/lib/create-icon-set\";export default function(glyphMap,fontName,expoAssetId,fontStyle){var _a;var font=_defineProperty({},fontName,expoAssetId);var RNVIconComponent=createIconSet(glyphMap,fontName,null,fontStyle);return _a=function(_React$Component){_inherits(Icon,_React$Component);function Icon(){var _this;_classCallCheck(this,Icon);_this=_possibleConstructorReturn(this,_getPrototypeOf(Icon).apply(this,arguments));_this._mounted=false;_this.state={fontIsLoaded:Font.isLoaded(fontName)};return _this;}_createClass(Icon,[{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:this._mounted=true;if(this.state.fontIsLoaded){_context.next=5;break;}_context.next=4;return _regeneratorRuntime.awrap(Font.loadAsync(font));case 4:this._mounted&&this.setState({fontIsLoaded:true});case 5:case\"end\":return _context.stop();}}},null,this);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}},{key:\"render\",value:function render(){var _this2=this;if(!this.state.fontIsLoaded){return React.createElement(Text,null);}return React.createElement(RNVIconComponent,_extends({ref:function ref(view){_this2._icon=view;}},this.props));}}]);return Icon;}(React.Component),_a.propTypes=RNVIconComponent.propTypes,_a.defaultProps=RNVIconComponent.defaultProps,_a.Button=createIconButtonComponent(_a),_a.glyphMap=glyphMap,_a.getRawGlyphMap=function(){return glyphMap;},_a.getFontFamily=function(){return fontName;},_a.loadFont=function(){return Font.loadAsync(font);},_a.font=font,_a;}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":[],"mappings":"ugBAAA,MAAO,CAAA,KAAP,KAAkB,OAAlB,C,qDAEA,MAAO,GAAK,CAAA,IAAZ,KAAsB,WAAtB,CACA,MAAO,CAAA,aAAP,8DACA,MAAO,CAAA,yBAAP,0DAEA,OACE,kBADF,CAEE,iBAFF,8DAKA,cAAc,UAAU,QAAV,CAAoB,QAApB,CAA8B,WAA9B,CAA2C,SAA3C,CAA0D,C,OACtE,GAAM,CAAA,IAAI,oBAAM,QAAN,CAAiB,WAAjB,CAAV,CACA,GAAM,CAAA,gBAAgB,CAAG,aAAa,CAAC,QAAD,CAAW,QAAX,CAAqB,IAArB,CAA2B,SAA3B,CAAtC,CAEA,MAAA,CAAA,EAAA,6DAAO,eAAA,sC,mFAUL,MAAA,QAAA,CAAW,KAAX,CAGA,MAAA,KAAA,CAAQ,CACN,YAAY,CAAE,IAAI,CAAC,QAAL,CAAc,QAAd,CADR,CAAR,CAbK,aAiDN,CAjDD,0MAkBI,KAAK,QAAL,CAAgB,IAAhB,CAlBJ,GAmBS,KAAK,KAAL,CAAW,YAnBpB,0EAoBY,IAAI,CAAC,SAAL,CAAe,IAAf,CApBZ,SAqBM,KAAK,QAAL,EAAiB,KAAK,QAAL,CAAc,CAAE,YAAY,CAAE,IAAhB,CAAd,CAAjB,CArBN,2HAyBsB,CAClB,KAAK,QAAL,CAAgB,KAAhB,CACD,CA3BH,sDA6BiB,KA7BjB,CA6BsB,CAClB,GAAI,KAAK,KAAT,CAAgB,CACd,KAAK,KAAL,CAAW,cAAX,CAA0B,KAA1B,EACD,CACF,CAjCH,uCAmCQ,iBACJ,GAAI,CAAC,KAAK,KAAL,CAAW,YAAhB,CAA8B,CAC5B,MAAO,qBAAC,IAAD,MAAP,CACD,CAED,MACE,qBAAC,gBAAD,WACE,GAAG,CAAE,aAAA,IAAI,CAAG,CACV,MAAI,CAAC,KAAL,CAAa,IAAb,CACD,CAHH,EAIM,KAAK,KAJX,EADF,CAQD,CAhDH,kBAA0B,KAAK,CAAC,SAAhC,CAAA,CACS,EAAA,CAAA,SAAA,CAAY,gBAAgB,CAAC,SADtC,CAES,EAAA,CAAA,YAAA,CAAe,gBAAgB,CAAC,YAFzC,CAGS,EAAA,CAAA,MAAA,CAAS,yBAAyB,CAAC,EAAD,CAH3C,CAIS,EAAA,CAAA,QAAA,CAAW,QAJpB,CAKS,EAAA,CAAA,cAAA,CAAiB,iBAAM,CAAA,QAAN,EAL1B,CAMS,EAAA,CAAA,aAAA,CAAgB,iBAAM,CAAA,QAAN,EANzB,CAOS,EAAA,CAAA,QAAA,CAAW,iBAAM,CAAA,IAAI,CAAC,SAAL,CAAe,IAAf,CAAN,EAPpB,CAQS,EAAA,CAAA,IAAA,CAAO,IARhB,CAiDE,EAjDF,CAkDD","sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport * as Font from \"expo-font\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport default function(glyphMap, fontName, expoAssetId, fontStyle?: any) {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}