{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import Constants from'expo-constants';import Linking from\"react-native-web/dist/exports/Linking\";import Platform from\"react-native-web/dist/exports/Platform\";import{deprecate}from'@unimodules/core';import StoreReview from\"./ExpoStoreReview\";export function isAvailableAsync(){return _regeneratorRuntime.async(function isAvailableAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",StoreReview.isAvailableAsync());case 1:case\"end\":return _context.stop();}}});}export function isSupported(){deprecate('expo-store-review','StoreReview.isSupported',{replacement:'StoreReview.isAvailableAsync'});}export function requestReview(){var url,supported;return _regeneratorRuntime.async(function requestReview$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(StoreReview&&StoreReview.requestReview)){_context2.next=5;break;}_context2.next=3;return _regeneratorRuntime.awrap(StoreReview.requestReview());case 3:_context2.next=19;break;case 5:url=storeUrl();if(!url){_context2.next=18;break;}_context2.next=9;return _regeneratorRuntime.awrap(Linking.canOpenURL(url));case 9:supported=_context2.sent;if(supported){_context2.next=14;break;}console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \",url);_context2.next=16;break;case 14:_context2.next=16;return _regeneratorRuntime.awrap(Linking.openURL(url));case 16:_context2.next=19;break;case 18:console.warn(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");case 19:case\"end\":return _context2.stop();}}});}export function storeUrl(){var manifest=Constants.manifest;if(Platform.OS==='ios'&&manifest.ios){return manifest.ios.appStoreUrl;}else if(Platform.OS==='android'&&manifest.android){return manifest.android.playStoreUrl;}else{return null;}}export function hasAction(){return _regeneratorRuntime.async(function hasAction$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.t0=!!storeUrl();if(_context3.t0){_context3.next=5;break;}_context3.next=4;return _regeneratorRuntime.awrap(isAvailableAsync());case 4:_context3.t0=_context3.sent;case 5:return _context3.abrupt(\"return\",_context3.t0);case 6:case\"end\":return _context3.stop();}}});}","map":{"version":3,"sources":["../src/StoreReview.ts"],"names":[],"mappings":"4DAAA,MAAO,CAAA,SAAP,KAAsB,gBAAtB,C,wHAEA,OAAS,SAAT,KAA0B,kBAA1B,CAEA,MAAO,CAAA,WAAP,yBAQA,MAAO,SAAe,CAAA,gBAAf,6JACE,WAAW,CAAC,gBAAZ,EADF,gDAOP,MAAM,SAAU,CAAA,WAAV,EAAqB,CACzB,SAAS,CAAC,mBAAD,CAAsB,yBAAtB,CAAiD,CACxD,WAAW,CAAE,8BAD2C,CAAjD,CAAT,CAGD,CAMD,MAAO,SAAe,CAAA,aAAf,oJACD,WAAW,EAAI,WAAW,CAAC,aAD1B,6EAEG,WAAW,CAAC,aAAZ,EAFH,wCAKG,GALH,CAKS,QAAQ,EALjB,KAMC,GAND,6EAOuB,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAPvB,SAOK,SAPL,mBAQI,SARJ,2BASC,OAAO,CAAC,IAAR,CAAa,0DAAb,CAAyE,GAAzE,EATD,mFAWO,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAXP,0CAeD,OAAO,CAAC,IAAR,CACE,oKADF,EAfC,gDA2BP,MAAM,SAAU,CAAA,QAAV,EAAkB,IACd,CAAA,QADc,CACD,SADC,CACd,QADc,CAEtB,GAAI,QAAQ,CAAC,EAAT,GAAgB,KAAhB,EAAyB,QAAQ,CAAC,GAAtC,CAA2C,CACzC,MAAO,CAAA,QAAQ,CAAC,GAAT,CAAa,WAApB,CACD,CAFD,IAEO,IAAI,QAAQ,CAAC,EAAT,GAAgB,SAAhB,EAA6B,QAAQ,CAAC,OAA1C,CAAmD,CACxD,MAAO,CAAA,QAAQ,CAAC,OAAT,CAAiB,YAAxB,CACD,CAFM,IAEA,CACL,MAAO,KAAP,CACD,CACF,CAKD,MAAO,SAAe,CAAA,SAAf,sIACE,CAAC,CAAC,QAAQ,EADZ,4FACyB,gBAAgB,EADzC","sourcesContent":["import Constants from 'expo-constants';\nimport { Linking, Platform } from 'react-native';\nimport { deprecate } from '@unimodules/core';\n\nimport StoreReview from './ExpoStoreReview';\n\n/*\n * Determine if the platform has the capabilities to use `requestedReview`\n * iOS: `true` if iOS 10.3 or greater and the StoreKit framework is linked\n * Android: Always `true` (open URL to app store)\n * Web: Always `false`\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return StoreReview.isAvailableAsync();\n}\n\n/*\n * Deprecated\n */\nexport function isSupported(): void {\n  deprecate('expo-store-review', 'StoreReview.isSupported', {\n    replacement: 'StoreReview.isAvailableAsync',\n  });\n}\n\n/*\n * Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app,\n * or open a web browser to the play store on Android\n */\nexport async function requestReview(): Promise<void> {\n  if (StoreReview && StoreReview.requestReview) {\n    await StoreReview.requestReview();\n  } else {\n    // If StoreReview is unavailable then get the store URL from `app.json` and open the store\n    const url = storeUrl();\n    if (url) {\n      const supported = await Linking.canOpenURL(url);\n      if (!supported) {\n        console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n      } else {\n        await Linking.openURL(url);\n      }\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.warn(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n * Get your app's store URLs from the `app.json`\n * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n */\nexport function storeUrl(): string | null {\n  const { manifest } = Constants;\n  if (Platform.OS === 'ios' && manifest.ios) {\n    return manifest.ios.appStoreUrl;\n  } else if (Platform.OS === 'android' && manifest.android) {\n    return manifest.android.playStoreUrl;\n  } else {\n    return null;\n  }\n}\n\n/*\n * A flag to detect if this module can do anything\n */\nexport async function hasAction(): Promise<boolean> {\n  return !!storeUrl() || (await isAvailableAsync());\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}