{"ast":null,"code":"import Animated from\"react-native-web/dist/exports/Animated\";var add=Animated.add,multiply=Animated.multiply;export default function conditional(condition,main,fallback){return add(multiply(condition,main),multiply(condition.interpolate({inputRange:[0,1],outputRange:[1,0]}),fallback));}","map":{"version":3,"sources":["conditional.tsx"],"names":["add","multiply","Animated","condition","inputRange","outputRange"],"mappings":"6DAEQA,GAAAA,CAAAA,G,CAAkBE,Q,CAAlBF,GAAAA,CAAKC,Q,CAAaC,Q,CAAbD,QAALD,CASR,cAAe,SAAA,CAAA,WAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAIb,CAOA,MAAOA,CAAAA,GAAG,CACRC,QAAQ,CAAA,SAAA,CADA,IACA,CADA,CAERA,QAAQ,CACNE,SAAS,CAATA,WAAAA,CAAsB,CACpBC,UAAU,CAAE,CAAA,CAAA,CADQ,CACR,CADQ,CAEpBC,WAAW,CAAE,CAAA,CAAA,CAHT,CAGS,CAFO,CAAtBF,CADM,CAFV,QAEU,CAFA,CAAV,CAUD","sourcesContent":["import { Animated } from 'react-native';\n\nconst { add, multiply } = Animated;\n\n/**\n * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n *\n * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n * @param main Animated Node to use if the condition is `true`\n * @param fallback Animated Node to use if the condition is `false`\n */\nexport default function conditional(\n  condition: Animated.AnimatedInterpolation,\n  main: Animated.AnimatedInterpolation,\n  fallback: Animated.AnimatedInterpolation\n) {\n  // To implement this behavior, we multiply the main node with the condition.\n  // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n  // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n  // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n  // This way, one of them will always be 0, and other one will be the value we need.\n  // In the end we add them both together, 0 + value we need = value we need\n  return add(\n    multiply(condition, main),\n    multiply(\n      condition.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      }),\n      fallback\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module"}