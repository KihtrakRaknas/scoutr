{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React from'react';import TextInput from\"react-native-web/dist/exports/TextInput\";export default(function(Navigator,navigatorConfig){var _class,_temp;return _temp=_class=function(_React$Component){_inherits(KeyboardAwareNavigator,_React$Component);function KeyboardAwareNavigator(){var _getPrototypeOf2;var _this;_classCallCheck(this,KeyboardAwareNavigator);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(KeyboardAwareNavigator)).call.apply(_getPrototypeOf2,[this].concat(args)));_this._previouslyFocusedTextInput=null;_this._handleGestureBegin=function(){_this._previouslyFocusedTextInput=TextInput.State.currentlyFocusedField();if(_this._previouslyFocusedTextInput){TextInput.State.blurTextInput(_this._previouslyFocusedTextInput);}_this.props.onGestureBegin&&_this.props.onGestureBegin();};_this._handleGestureCanceled=function(){if(_this._previouslyFocusedTextInput){TextInput.State.focusTextInput(_this._previouslyFocusedTextInput);}_this.props.onGestureCanceled&&_this.props.onGestureCanceled();};_this._handleGestureEnd=function(){_this._previouslyFocusedTextInput=null;_this.props.onGestureFinish&&_this.props.onGestureFinish();};_this._handleTransitionStart=function(transitionProps,prevTransitionProps){if(transitionProps.index!==prevTransitionProps.index){var currentField=TextInput.State.currentlyFocusedField();if(currentField){TextInput.State.blurTextInput(currentField);}}var onTransitionStart=_this.props.onTransitionStart||navigatorConfig.onTransitionStart;onTransitionStart&&onTransitionStart(transitionProps,prevTransitionProps);};return _this;}_createClass(KeyboardAwareNavigator,[{key:\"render\",value:function render(){return React.createElement(Navigator,_extends({},this.props,{onGestureBegin:this._handleGestureBegin,onGestureCanceled:this._handleGestureCanceled,onGestureEnd:this._handleGestureEnd,onTransitionStart:this._handleTransitionStart}));}}]);return KeyboardAwareNavigator;}(React.Component),_class.router=Navigator.router,_class.navigationOptions=Navigator.navigationOptions,_temp;});","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/@react-navigation/native/dist/createKeyboardAwareNavigator.js"],"names":["React","Navigator","navigatorConfig","_previouslyFocusedTextInput","_handleGestureBegin","TextInput","State","currentlyFocusedField","blurTextInput","props","onGestureBegin","_handleGestureCanceled","focusTextInput","onGestureCanceled","_handleGestureEnd","onGestureFinish","_handleTransitionStart","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","Component","router","navigationOptions"],"mappings":"wYAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,+DAGA,eAAgB,SAACC,SAAD,CAAYC,eAAZ,oeAGdC,2BAHc,CAGgB,IAHhB,OASdC,mBATc,CASQ,UAAM,CAC1B,MAAKD,2BAAL,CAAmCE,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAAnC,CACA,GAAI,MAAKJ,2BAAT,CAAsC,CACpCE,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8B,MAAKL,2BAAnC,EACD,CACD,MAAKM,KAAL,CAAWC,cAAX,EAA6B,MAAKD,KAAL,CAAWC,cAAX,EAA7B,CACD,CAfa,OAiBdC,sBAjBc,CAiBW,UAAM,CAC7B,GAAI,MAAKR,2BAAT,CAAsC,CACpCE,SAAS,CAACC,KAAV,CAAgBM,cAAhB,CAA+B,MAAKT,2BAApC,EACD,CACD,MAAKM,KAAL,CAAWI,iBAAX,EAAgC,MAAKJ,KAAL,CAAWI,iBAAX,EAAhC,CACD,CAtBa,OAwBdC,iBAxBc,CAwBM,UAAM,CACxB,MAAKX,2BAAL,CAAmC,IAAnC,CACA,MAAKM,KAAL,CAAWM,eAAX,EAA8B,MAAKN,KAAL,CAAWM,eAAX,EAA9B,CACD,CA3Ba,OA6BdC,sBA7Bc,CA6BW,SAACC,eAAD,CAAkBC,mBAAlB,CAA0C,CAIjE,GAAID,eAAe,CAACE,KAAhB,GAA0BD,mBAAmB,CAACC,KAAlD,CAAyD,CACvD,GAAMC,CAAAA,YAAY,CAAGf,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAArB,CACA,GAAIa,YAAJ,CAAkB,CAChBf,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8BY,YAA9B,EACD,CACF,CAED,GAAMC,CAAAA,iBAAiB,CAAG,MAAKZ,KAAL,CAAWY,iBAAX,EAAgCnB,eAAe,CAACmB,iBAA1E,CACAA,iBAAiB,EAAIA,iBAAiB,CAACJ,eAAD,CAAkBC,mBAAlB,CAAtC,CACD,CA1Ca,yFAKL,CACP,MAAO,qBAAC,SAAD,aAAe,KAAKT,KAApB,EAA2B,cAAc,CAAE,KAAKL,mBAAhD,CAAqE,iBAAiB,CAAE,KAAKO,sBAA7F,CAAqH,YAAY,CAAE,KAAKG,iBAAxI,CAA2J,iBAAiB,CAAE,KAAKE,sBAAnL,GAAP,CACD,CAPa,oCAAqEhB,KAAK,CAACsB,SAA3E,SACPC,MADO,CACEtB,SAAS,CAACsB,MADZ,QAEPC,iBAFO,CAEavB,SAAS,CAACuB,iBAFvB,QAAhB","sourcesContent":["import React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default ((Navigator, navigatorConfig) => class KeyboardAwareNavigator extends React.Component {\n  static router = Navigator.router;\n  static navigationOptions = Navigator.navigationOptions;\n  _previouslyFocusedTextInput = null;\n\n  render() {\n    return <Navigator {...this.props} onGestureBegin={this._handleGestureBegin} onGestureCanceled={this._handleGestureCanceled} onGestureEnd={this._handleGestureEnd} onTransitionStart={this._handleTransitionStart} />;\n  }\n\n  _handleGestureBegin = () => {\n    this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n    if (this._previouslyFocusedTextInput) {\n      TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n    }\n    this.props.onGestureBegin && this.props.onGestureBegin();\n  };\n\n  _handleGestureCanceled = () => {\n    if (this._previouslyFocusedTextInput) {\n      TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n    }\n    this.props.onGestureCanceled && this.props.onGestureCanceled();\n  };\n\n  _handleGestureEnd = () => {\n    this._previouslyFocusedTextInput = null;\n    this.props.onGestureFinish && this.props.onGestureFinish();\n  };\n\n  _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n    // TODO: We should not even have received the transition start event\n    // in the case where the index did not change, I believe. We\n    // should revisit this after 2.0 release.\n    if (transitionProps.index !== prevTransitionProps.index) {\n      const currentField = TextInput.State.currentlyFocusedField();\n      if (currentField) {\n        TextInput.State.blurTextInput(currentField);\n      }\n    }\n\n    const onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n    onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n  };\n});"]},"metadata":{},"sourceType":"module"}