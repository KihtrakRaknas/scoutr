{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Stack/StackView.tsx\";import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{SafeAreaConsumer}from'react-native-safe-area-context';import{StackActions,SceneView}from'react-navigation';import CardStack from\"./CardStack\";import KeyboardManager from\"../KeyboardManager\";import HeaderContainer from\"../Header/HeaderContainer\";import SafeAreaProviderCompat from\"../SafeAreaProviderCompat\";var StackView=function(_React$Component){_inherits(StackView,_React$Component);function StackView(){var _getPrototypeOf2;var _this;_classCallCheck(this,StackView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(StackView)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={routes:[],previousRoutes:[],previousDescriptors:{},openingRouteKeys:[],closingRouteKeys:[],replacingRouteKeys:[],descriptors:{}};_this.getGesturesEnabled=function(_ref){var route=_ref.route;var descriptor=_this.state.descriptors[route.key];if(descriptor){var _descriptor$options=descriptor.options,gestureEnabled=_descriptor$options.gestureEnabled,animationEnabled=_descriptor$options.animationEnabled;if(animationEnabled===false){return false;}return gestureEnabled!==undefined?gestureEnabled:Platform.OS!=='android';}return false;};_this.getPreviousRoute=function(_ref2){var route=_ref2.route;var _this$state=_this.state,closingRouteKeys=_this$state.closingRouteKeys,replacingRouteKeys=_this$state.replacingRouteKeys;var routes=_this.state.routes.filter(function(r){return r.key===route.key||!closingRouteKeys.includes(r.key)&&!replacingRouteKeys.includes(r.key);});var index=routes.findIndex(function(r){return r.key===route.key;});return routes[index-1];};_this.renderScene=function(_ref3){var route=_ref3.route;var descriptor=_this.state.descriptors[route.key]||_this.props.descriptors[route.key];if(!descriptor){return null;}var navigation=descriptor.navigation,getComponent=descriptor.getComponent;var SceneComponent=getComponent();return React.createElement(SceneView,{screenProps:_this.props.screenProps,navigation:navigation,component:SceneComponent,__source:{fileName:_jsxFileName,lineNumber:269}});};_this.renderHeader=function(props){return React.createElement(HeaderContainer,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:278}}));};_this.handleTransitionComplete=function(_ref4){var route=_ref4.route;_this.props.navigation.dispatch(StackActions.completeTransition({toChildKey:route.key}));};_this.handleOpenRoute=function(_ref5){var route=_ref5.route;_this.handleTransitionComplete({route:route});_this.setState(function(state){return{routes:state.replacingRouteKeys.length?state.routes.filter(function(r){return!state.replacingRouteKeys.includes(r.key);}):state.routes,openingRouteKeys:state.openingRouteKeys.filter(function(key){return key!==route.key;}),closingRouteKeys:state.closingRouteKeys.filter(function(key){return key!==route.key;}),replacingRouteKeys:[]};});};_this.handleCloseRoute=function(_ref6){var route=_ref6.route;var _this$props=_this.props,state=_this$props.state,navigation=_this$props.navigation;if(state.routes.find(function(r){return r.key===route.key;})){navigation.dispatch(StackActions.pop({key:route.key}));}else{var index=_this.state.routes.findIndex(function(r){return r.key===route.key;});_this.handleTransitionComplete({route:_this.state.routes[Math.max(index-1,0)]});}_this.setState(function(state){return{routes:state.routes.filter(function(r){return r.key!==route.key;}),openingRouteKeys:state.openingRouteKeys.filter(function(key){return key!==route.key;}),closingRouteKeys:state.closingRouteKeys.filter(function(key){return key!==route.key;})};});};_this.handleTransitionStart=function(_ref7,closing){var route=_ref7.route;var descriptors=_this.props.descriptors;var descriptor=descriptors[route.key]||_this.state.descriptors[route.key];descriptor&&descriptor.options.onTransitionStart&&descriptor.options.onTransitionStart({closing:closing});};_this.handleTransitionEnd=function(_ref8,closing){var route=_ref8.route;var descriptors=_this.props.descriptors;var descriptor=descriptors[route.key]||_this.state.descriptors[route.key];descriptor&&descriptor.options.onTransitionEnd&&descriptor.options.onTransitionEnd({closing:closing});};return _this;}_createClass(StackView,[{key:\"render\",value:function render(){var _this2=this;var _this$props2=this.props,state=_this$props2.state,navigation=_this$props2.navigation,keyboardHandlingEnabled=_this$props2.keyboardHandlingEnabled,_this$props2$mode=_this$props2.mode,mode=_this$props2$mode===void 0?'card':_this$props2$mode,rest=_objectWithoutProperties(_this$props2,[\"state\",\"navigation\",\"keyboardHandlingEnabled\",\"mode\"]);var _this$state2=this.state,routes=_this$state2.routes,descriptors=_this$state2.descriptors,openingRouteKeys=_this$state2.openingRouteKeys,closingRouteKeys=_this$state2.closingRouteKeys;var headerMode=mode!=='modal'&&Platform.OS==='ios'?'float':'screen';return React.createElement(SafeAreaProviderCompat,{__source:{fileName:_jsxFileName,lineNumber:372}},React.createElement(SafeAreaConsumer,{__source:{fileName:_jsxFileName,lineNumber:373}},function(insets){return React.createElement(KeyboardManager,{enabled:keyboardHandlingEnabled!==false,__source:{fileName:_jsxFileName,lineNumber:375}},function(props){return React.createElement(CardStack,_extends({mode:mode,insets:insets,getPreviousRoute:_this2.getPreviousRoute,getGesturesEnabled:_this2.getGesturesEnabled,routes:routes,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,onOpenRoute:_this2.handleOpenRoute,onCloseRoute:_this2.handleCloseRoute,onTransitionStart:_this2.handleTransitionStart,onTransitionEnd:_this2.handleTransitionEnd,renderHeader:_this2.renderHeader,renderScene:_this2.renderScene,headerMode:headerMode,state:state,descriptors:descriptors},rest,props,{__source:{fileName:_jsxFileName,lineNumber:377}}));});}));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if(props.state.routes===state.previousRoutes&&state.routes.length){if(props.descriptors!==state.previousDescriptors){var _descriptors=state.routes.reduce(function(acc,route){acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});return{previousDescriptors:props.descriptors,descriptors:_descriptors};}return null;}var routes=props.state.index<props.state.routes.length-1?props.state.routes.slice(0,props.state.index+1):props.state.routes;var openingRouteKeys=state.openingRouteKeys,closingRouteKeys=state.closingRouteKeys,replacingRouteKeys=state.replacingRouteKeys,previousRoutes=state.previousRoutes;var previousFocusedRoute=previousRoutes[previousRoutes.length-1];var nextFocusedRoute=routes[routes.length-1];var isAnimationEnabled=function isAnimationEnabled(key){var descriptor=props.descriptors[key]||state.descriptors[key];return descriptor?descriptor.options.animationEnabled!==false:true;};if(previousFocusedRoute&&previousFocusedRoute.key!==nextFocusedRoute.key){if(!previousRoutes.find(function(r){return r.key===nextFocusedRoute.key;})){if(isAnimationEnabled(nextFocusedRoute.key)&&!openingRouteKeys.includes(nextFocusedRoute.key)){openingRouteKeys=[].concat(_toConsumableArray(openingRouteKeys),[nextFocusedRoute.key]);closingRouteKeys=closingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});replacingRouteKeys=replacingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});if(!routes.find(function(r){return r.key===previousFocusedRoute.key;})){replacingRouteKeys=[].concat(_toConsumableArray(replacingRouteKeys),[previousFocusedRoute.key]);openingRouteKeys=openingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});closingRouteKeys=closingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});routes=routes.slice();routes.splice(routes.length-1,0,previousFocusedRoute);}}}else if(!routes.find(function(r){return r.key===previousFocusedRoute.key;})){if(isAnimationEnabled(previousFocusedRoute.key)&&!closingRouteKeys.includes(previousFocusedRoute.key)){closingRouteKeys=[].concat(_toConsumableArray(closingRouteKeys),[previousFocusedRoute.key]);openingRouteKeys=openingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});replacingRouteKeys=replacingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});routes=[].concat(_toConsumableArray(routes),[previousFocusedRoute]);}}else{}}else if(replacingRouteKeys.length||closingRouteKeys.length){var _routes;routes=routes.slice();(_routes=routes).splice.apply(_routes,[routes.length-1,0].concat(_toConsumableArray(state.routes.filter(function(_ref9){var key=_ref9.key;return isAnimationEnabled(key)?replacingRouteKeys.includes(key)||closingRouteKeys.includes(key):false;}))));}if(!routes.length){throw new Error(\"There should always be at least one route.\");}var descriptors=routes.reduce(function(acc,route){acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});return{routes:routes,previousRoutes:props.state.routes,previousDescriptors:props.descriptors,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,replacingRouteKeys:replacingRouteKeys,descriptors:descriptors};}}]);return StackView;}(React.Component);export default StackView;","map":{"version":3,"sources":["StackView.tsx"],"names":["StackView","React","Component","props","state","descriptors","acc","route","previousDescriptors","routes","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousRoutes","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","r","key","getGesturesEnabled","gestureEnabled","animationEnabled","Platform","getPreviousRoute","index","renderScene","navigation","getComponent","SceneComponent","renderHeader","handleTransitionComplete","StackActions","toChildKey","handleOpenRoute","handleCloseRoute","Math","handleTransitionStart","closing","handleTransitionEnd","keyboardHandlingEnabled","mode","rest","headerMode"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  SceneView,\n} from 'react-navigation';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nclass StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (props.state.routes === state.previousRoutes && state.routes.length) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<StackDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            replacingRouteKeys = [\n              ...replacingRouteKeys,\n              previousFocusedRoute.key,\n            ];\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n            closingRouteKeys = closingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            // Keep the old route in state because it's visible under the new route, and removing it will feel abrupt\n            // We need to insert it just before the focused one (the route being pushed)\n            // After the push animation is completed, routes being replaced will be removed completely\n            routes = routes.slice();\n            routes.splice(routes.length - 1, 0, previousFocusedRoute);\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(`There should always be at least one route.`);\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = ({ route }: { route: Route<string> }) => {\n    // TODO: remove when the new event system lands\n    this.props.navigation.dispatch(\n      StackActions.completeTransition({ toChildKey: route.key })\n    );\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.handleTransitionComplete({ route });\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find(r => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key }));\n    } else {\n      // While closing route we need to point to the previous one assuming that\n      // this previous one in routes array\n      const index = this.state.routes.findIndex(r => r.key === route.key);\n\n      this.handleTransitionComplete({\n        route: this.state.routes[Math.max(index - 1, 0)],\n      });\n    }\n\n    // We need to clean up any state tracking the route and pop it immediately\n    this.setState(state => ({\n      routes: state.routes.filter(r => r.key !== route.key),\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n    }));\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor &&\n      descriptor.options.onTransitionStart &&\n      descriptor.options.onTransitionStart({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor &&\n      descriptor.options.onTransitionEnd &&\n      descriptor.options.onTransitionEnd({ closing });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <SafeAreaProviderCompat>\n        <SafeAreaConsumer>\n          {insets => (\n            <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n              {props => (\n                <CardStack\n                  mode={mode}\n                  insets={insets as EdgeInsets}\n                  getPreviousRoute={this.getPreviousRoute}\n                  getGesturesEnabled={this.getGesturesEnabled}\n                  routes={routes}\n                  openingRouteKeys={openingRouteKeys}\n                  closingRouteKeys={closingRouteKeys}\n                  onOpenRoute={this.handleOpenRoute}\n                  onCloseRoute={this.handleCloseRoute}\n                  onTransitionStart={this.handleTransitionStart}\n                  onTransitionEnd={this.handleTransitionEnd}\n                  renderHeader={this.renderHeader}\n                  renderScene={this.renderScene}\n                  headerMode={headerMode}\n                  state={state}\n                  descriptors={descriptors}\n                  {...rest}\n                  {...props}\n                />\n              )}\n            </KeyboardManager>\n          )}\n        </SafeAreaConsumer>\n      </SafeAreaProviderCompat>\n    );\n  }\n}\n\nexport default StackView;\n"]},"metadata":{},"sourceType":"module"}