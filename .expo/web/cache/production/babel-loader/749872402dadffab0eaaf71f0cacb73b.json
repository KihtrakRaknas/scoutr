{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import ExpoFontLoader from\"./ExpoFontLoader\";export function fontFamilyNeedsScoping(name){return false;}function isAsset(asset){return typeof asset==='object'&&'uri'in asset&&'name'in asset;}export function getAssetForSource(source){if(isAsset(source)){return{uri:source.uri||source.localUri};}if(typeof source!=='string'){throw new Error(\"Unexpected type \"+typeof source+\" expected a URI string or Asset from expo-asset.\");}return{uri:source};}export function loadSingleFontAsync(name,input){var asset;return _regeneratorRuntime.async(function loadSingleFontAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:asset=input;if(!asset.downloadAsync){_context.next=3;break;}throw new Error('expo-font: loadSingleFontAsync expected an asset of type FontResource on web');case 3:_context.next=5;return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name,input));case 5:case\"end\":return _context.stop();}}});}export function getNativeFontName(name){return name;}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":"4DACA,MAAO,CAAA,cAAP,wBAGA,MAAM,SAAU,CAAA,sBAAV,CAAiC,IAAjC,CAA6C,CACjD,MAAO,MAAP,CACD,CAED,QAAS,CAAA,OAAT,CAAiB,KAAjB,CAA2B,CACzB,MAAO,OAAO,CAAA,KAAP,GAAiB,QAAjB,EAA6B,OAAS,CAAA,KAAtC,EAA+C,QAAU,CAAA,KAAhE,CACD,CAED,MAAM,SAAU,CAAA,iBAAV,CAA4B,MAA5B,CAA8C,CAClD,GAAI,OAAO,CAAC,MAAD,CAAX,CAAqB,CACnB,MAAO,CACL,GAAG,CAAE,MAAM,CAAC,GAAP,EAAc,MAAM,CAAC,QADrB,CAAP,CAGD,CAED,GAAI,MAAO,CAAA,MAAP,GAAkB,QAAtB,CAAgC,CAC9B,KAAM,IAAI,CAAA,KAAJ,oBACe,MAAO,CAAA,MADtB,oDAAN,CAGD,CAED,MAAO,CACL,GAAG,CAAE,MADA,CAAP,CAGD,CAED,MAAO,SAAe,CAAA,mBAAf,CACL,IADK,CAEL,KAFK,yIAIC,KAJD,CAIS,KAJT,KAKD,KAAK,CAAC,aALL,8BAMG,IAAI,CAAA,KAAJ,CAAU,8EAAV,CANH,yDASC,cAAc,CAAC,SAAf,CAAyB,IAAzB,CAA+B,KAA/B,CATD,gDAYP,MAAM,SAAU,CAAA,iBAAV,CAA4B,IAA5B,CAAwC,CAC5C,MAAO,CAAA,IAAP,CACD","sourcesContent":["import { Asset } from 'expo-asset';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontSource, FontResource } from './Font.types';\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nfunction isAsset(asset: any): asset is Asset {\n  return typeof asset === 'object' && 'uri' in asset && 'name' in asset;\n}\n\nexport function getAssetForSource(source: FontSource): FontResource {\n  if (isAsset(source)) {\n    return {\n      uri: source.uri || source.localUri!,\n    };\n  }\n\n  if (typeof source !== 'string') {\n    throw new Error(\n      `Unexpected type ${typeof source} expected a URI string or Asset from expo-asset.`\n    );\n  }\n\n  return {\n    uri: source,\n  };\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as any;\n  if (asset.downloadAsync) {\n    throw new Error('expo-font: loadSingleFontAsync expected an asset of type FontResource on web');\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}