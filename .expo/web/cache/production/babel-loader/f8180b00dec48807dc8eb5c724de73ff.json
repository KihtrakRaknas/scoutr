{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _jsxFileName=\"/Users/satya/Workspace/Callstack/react-navigation-stack/src/vendor/views/Header/Header.tsx\";import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";import{StackActions}from'react-navigation';import{getStatusBarHeight}from'react-native-iphone-x-helper';import HeaderSegment,{getDefaultHeaderHeight}from\"./HeaderSegment\";import HeaderTitle from\"./HeaderTitle\";var Header=React.memo(function Header(props){var scene=props.scene,previous=props.previous,layout=props.layout,insets=props.insets,navigation=props.navigation,styleInterpolator=props.styleInterpolator;var options=scene.descriptor.options;var title=typeof options.headerTitle!=='function'&&options.headerTitle!==undefined?options.headerTitle:options.title!==undefined?options.title:scene.route.routeName;var leftLabel;if(options.headerBackTitle!==undefined){leftLabel=options.headerBackTitle;}else if(previous){var o=previous.descriptor.options;leftLabel=typeof o.headerTitle!=='function'&&o.headerTitle!==undefined?o.headerTitle:o.title!==undefined?o.title:previous.route.routeName;}return React.createElement(HeaderSegment,_extends({},options,{insets:insets,layout:layout,scene:scene,title:title,leftLabel:leftLabel,headerTitle:typeof options.headerTitle!=='function'?function(props){return React.createElement(HeaderTitle,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:55}}));}:options.headerTitle,onGoBack:previous?function(){return navigation.dispatch(StackActions.pop({key:scene.route.key}));}:undefined,styleInterpolator:styleInterpolator,__source:{fileName:_jsxFileName,lineNumber:46}}));});Object.defineProperty(Header,'HEIGHT',{get:function get(){console.warn(\"Deprecation in 'createStackNavigator': 'Header.HEIGHT' will be removed in a future version. Use 'useHeaderHeight' or 'HeaderHeightContext' instead\");return getDefaultHeaderHeight(Dimensions.get('window'),getStatusBarHeight(true));}});export default Header;","map":{"version":3,"sources":["Header.tsx"],"names":["Header","React","scene","previous","layout","insets","navigation","styleInterpolator","props","options","title","leftLabel","o","StackActions","key","Object","get","console","getDefaultHeaderHeight","Dimensions","getStatusBarHeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport { StackActions } from 'react-navigation';\nimport { getStatusBarHeight } from 'react-native-iphone-x-helper';\n\nimport HeaderSegment, { getDefaultHeaderHeight } from './HeaderSegment';\nimport { StackHeaderProps, StackHeaderTitleProps } from '../../types';\nimport HeaderTitle from './HeaderTitle';\n\nconst Header = React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.routeName;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.routeName;\n  }\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={\n        previous\n        // @ts-ignore\n          ? () => navigation.dispatch(StackActions.pop({ key: scene.route.key }))\n          : undefined\n      }\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n\nObject.defineProperty(Header, 'HEIGHT', {\n  get() {\n    console.warn(\n      \"Deprecation in 'createStackNavigator': 'Header.HEIGHT' will be removed in a future version. Use 'useHeaderHeight' or 'HeaderHeightContext' instead\"\n    );\n\n    return getDefaultHeaderHeight(\n      Dimensions.get('window'),\n      getStatusBarHeight(true)\n    );\n  },\n});\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}