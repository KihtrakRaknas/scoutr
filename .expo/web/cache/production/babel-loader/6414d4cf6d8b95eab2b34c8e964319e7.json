{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React from'react';import ScrollView from\"react-native-web/dist/exports/ScrollView\";import Platform from\"react-native-web/dist/exports/Platform\";import FlatList from\"react-native-web/dist/exports/FlatList\";import SectionList from\"react-native-web/dist/exports/SectionList\";import RefreshControl from\"react-native-web/dist/exports/RefreshControl\";import{ScrollView as GHScrollView}from'react-native-gesture-handler';import createNavigationAwareScrollable from\"./createNavigationAwareScrollable\";import invariant from\"./utils/invariant\";var WrappedScrollView;if(Platform.OS==='android'){WrappedScrollView=createNavigationAwareScrollable(ScrollView);}else{WrappedScrollView=createNavigationAwareScrollable(GHScrollView);}function propsMaybeWithRefreshControl(props){var onRefresh=props.onRefresh;if(onRefresh){invariant(typeof props.refreshing==='boolean','`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `'+JSON.stringify(props.refreshing)+'`');return _objectSpread({},props,{refreshControl:props.refreshControl==null?React.createElement(RefreshControl,{refreshing:props.refreshing,onRefresh:onRefresh,progressViewOffset:props.progressViewOffset}):props.refreshControl});}else{return props;}}var WrappedFlatList=React.forwardRef(function(props,ref){return React.createElement(FlatList,_extends({ref:ref},props,{renderScrollComponent:function renderScrollComponent(props){return React.createElement(WrappedScrollView,propsMaybeWithRefreshControl(props));}}));});var WrappedSectionList=React.forwardRef(function(props,ref){return React.createElement(SectionList,_extends({ref:ref},props,{renderScrollComponent:function renderScrollComponent(props){return React.createElement(WrappedScrollView,propsMaybeWithRefreshControl(props));}}));});module.exports={ScrollView:WrappedScrollView,FlatList:WrappedFlatList,SectionList:WrappedSectionList};","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/@react-navigation/native/dist/Scrollables.js"],"names":["React","ScrollView","GHScrollView","createNavigationAwareScrollable","invariant","WrappedScrollView","Platform","OS","propsMaybeWithRefreshControl","props","onRefresh","refreshing","JSON","stringify","refreshControl","progressViewOffset","WrappedFlatList","forwardRef","ref","WrappedSectionList","module","exports","FlatList","SectionList"],"mappings":"o5BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,uUAEA,OAASC,UAAU,GAAIC,CAAAA,YAAvB,KAA2C,8BAA3C,CACA,MAAOC,CAAAA,+BAAP,yCACA,MAAOC,CAAAA,SAAP,yBAEA,GAAIC,CAAAA,iBAAJ,CACA,GAAIC,QAAQ,CAACC,EAAT,GAAgB,SAApB,CAA+B,CAI7BF,iBAAiB,CAAGF,+BAA+B,CAACF,UAAD,CAAnD,CACD,CALD,IAKO,CACLI,iBAAiB,CAAGF,+BAA+B,CAACD,YAAD,CAAnD,CACD,CAED,QAASM,CAAAA,4BAAT,CAAsCC,KAAtC,CAA6C,CAC3C,GAAMC,CAAAA,SAAS,CAAGD,KAAK,CAACC,SAAxB,CACA,GAAIA,SAAJ,CAAe,CACbN,SAAS,CAAC,MAAOK,CAAAA,KAAK,CAACE,UAAb,GAA4B,SAA7B,CAAwC,oFAAsFC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACE,UAArB,CAAtF,CAAyH,GAAjK,CAAT,CACA,wBACKF,KADL,EAEEK,cAAc,CAAEL,KAAK,CAACK,cAAN,EAAwB,IAAxB,CAA+B,oBAAC,cAAD,EAAgB,UAAU,CAAEL,KAAK,CAACE,UAAlC,CAA8C,SAAS,CAAED,SAAzD,CAAoE,kBAAkB,CAAED,KAAK,CAACM,kBAA9F,EAA/B,CAAsJN,KAAK,CAACK,cAF9K,GAID,CAND,IAMO,CACL,MAAOL,CAAAA,KAAP,CACD,CACF,CAED,GAAMO,CAAAA,eAAe,CAAGhB,KAAK,CAACiB,UAAN,CAAiB,SAACR,KAAD,CAAQS,GAAR,QAAgB,qBAAC,QAAD,WAAU,GAAG,CAAEA,GAAf,EAAwBT,KAAxB,EAA+B,qBAAqB,CAAE,+BAAAA,KAAK,QAAI,qBAAC,iBAAD,CAAuBD,4BAA4B,CAACC,KAAD,CAAnD,CAAJ,EAA3D,GAAhB,EAAjB,CAAxB,CAEA,GAAMU,CAAAA,kBAAkB,CAAGnB,KAAK,CAACiB,UAAN,CAAiB,SAACR,KAAD,CAAQS,GAAR,QAAgB,qBAAC,WAAD,WAAa,GAAG,CAAEA,GAAlB,EAA2BT,KAA3B,EAAkC,qBAAqB,CAAE,+BAAAA,KAAK,QAAI,qBAAC,iBAAD,CAAuBD,4BAA4B,CAACC,KAAD,CAAnD,CAAJ,EAA9D,GAAhB,EAAjB,CAA3B,CAGAW,MAAM,CAACC,OAAP,CAAiB,CACfpB,UAAU,CAAEI,iBADG,CAEfiB,QAAQ,CAAEN,eAFK,CAGfO,WAAW,CAAEJ,kBAHE,CAAjB","sourcesContent":["import React from 'react';\nimport { ScrollView, Platform, FlatList, SectionList, RefreshControl } from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return {\n      ...props,\n      refreshControl: props.refreshControl == null ? <RefreshControl refreshing={props.refreshing} onRefresh={onRefresh} progressViewOffset={props.progressViewOffset} /> : props.refreshControl\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => <FlatList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\nconst WrappedSectionList = React.forwardRef((props, ref) => <SectionList ref={ref} {...props} renderScrollComponent={props => <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />} />);\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = {\n  ScrollView: WrappedScrollView,\n  FlatList: WrappedFlatList,\n  SectionList: WrappedSectionList\n};"]},"metadata":{},"sourceType":"module"}