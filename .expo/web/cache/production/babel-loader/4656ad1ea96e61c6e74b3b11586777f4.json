{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React from'react';import PropTypes from'prop-types';import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import Modal from\"react-native-web/dist/exports/Modal\";import View from\"react-native-web/dist/exports/View\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import{ViewPropTypes,withTheme}from\"../config\";import{ScreenWidth,ScreenHeight,isIOS}from\"../helpers\";import Triangle from\"./Triangle\";import getTooltipCoordinate,{getElementVisibleWidth}from\"./getTooltipCoordinate\";var Tooltip=function(_React$PureComponent){_inherits(Tooltip,_React$PureComponent);function Tooltip(){var _getPrototypeOf2;var _this;_classCallCheck(this,Tooltip);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Tooltip)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={isVisible:false,yOffset:0,xOffset:0,elementWidth:0,elementHeight:0};_this.toggleTooltip=function(){var onClose=_this.props.onClose;_this.getElementPosition();_this.setState(function(prevState){if(prevState.isVisible&&!isIOS){onClose&&onClose();}return{isVisible:!prevState.isVisible};});};_this.wrapWithPress=function(toggleOnPress,children){if(toggleOnPress){return React.createElement(TouchableOpacity,{onPress:_this.toggleTooltip,activeOpacity:1},children);}return children;};_this.getTooltipStyle=function(){var _this$state=_this.state,yOffset=_this$state.yOffset,xOffset=_this$state.xOffset,elementHeight=_this$state.elementHeight,elementWidth=_this$state.elementWidth;var _this$props=_this.props,height=_this$props.height,backgroundColor=_this$props.backgroundColor,width=_this$props.width,withPointer=_this$props.withPointer,containerStyle=_this$props.containerStyle;var _getTooltipCoordinate=getTooltipCoordinate(xOffset,yOffset,elementWidth,elementHeight,ScreenWidth,ScreenHeight,width,height,withPointer),x=_getTooltipCoordinate.x,y=_getTooltipCoordinate.y;return _objectSpread({position:'absolute',left:x,top:y,width:width,height:height,backgroundColor:backgroundColor,display:'flex',alignItems:'center',justifyContent:'center',flex:1,borderRadius:10,padding:10},containerStyle);};_this.renderPointer=function(tooltipY){var _this$state2=_this.state,yOffset=_this$state2.yOffset,xOffset=_this$state2.xOffset,elementHeight=_this$state2.elementHeight,elementWidth=_this$state2.elementWidth;var _this$props2=_this.props,backgroundColor=_this$props2.backgroundColor,pointerColor=_this$props2.pointerColor;var pastMiddleLine=yOffset>tooltipY;return React.createElement(View,{style:{position:'absolute',top:pastMiddleLine?yOffset-13:yOffset+elementHeight-2,left:xOffset+getElementVisibleWidth(elementWidth,xOffset,ScreenWidth)/2-7.5}},React.createElement(Triangle,{style:{borderBottomColor:pointerColor||backgroundColor},isDown:pastMiddleLine}));};_this.renderContent=function(withTooltip){var _this$props3=_this.props,popover=_this$props3.popover,withPointer=_this$props3.withPointer,toggleOnPress=_this$props3.toggleOnPress,highlightColor=_this$props3.highlightColor;if(!withTooltip){return _this.wrapWithPress(toggleOnPress,_this.props.children);}var _this$state3=_this.state,yOffset=_this$state3.yOffset,xOffset=_this$state3.xOffset,elementWidth=_this$state3.elementWidth,elementHeight=_this$state3.elementHeight;var tooltipStyle=_this.getTooltipStyle();return React.createElement(View,null,React.createElement(View,{style:{position:'absolute',top:yOffset,left:xOffset,backgroundColor:highlightColor,overflow:'visible',width:elementWidth,height:elementHeight}},_this.props.children),withPointer&&_this.renderPointer(tooltipStyle.top),React.createElement(View,{style:tooltipStyle,testID:\"tooltipPopoverContainer\"},popover));};_this.getElementPosition=function(){_this.renderedElement&&_this.renderedElement.measure(function(frameOffsetX,frameOffsetY,width,height,pageOffsetX,pageOffsetY){_this.setState({xOffset:pageOffsetX,yOffset:isIOS?pageOffsetY:pageOffsetY-StatusBar.currentHeight,elementWidth:width,elementHeight:height});});};return _this;}_createClass(Tooltip,[{key:\"componentDidMount\",value:function componentDidMount(){setTimeout(this.getElementPosition,500);}},{key:\"render\",value:function render(){var _this2=this;var isVisible=this.state.isVisible;var _this$props4=this.props,onClose=_this$props4.onClose,withOverlay=_this$props4.withOverlay,overlayColor=_this$props4.overlayColor,onOpen=_this$props4.onOpen;return React.createElement(View,{collapsable:false,ref:function ref(e){_this2.renderedElement=e;}},this.renderContent(false),React.createElement(Modal,{animationType:\"fade\",visible:isVisible,transparent:true,onDismiss:onClose,onShow:onOpen,onRequestClose:onClose},React.createElement(TouchableOpacity,{style:styles.container(withOverlay,overlayColor),onPress:this.toggleTooltip,activeOpacity:1},this.renderContent(true))));}}]);return Tooltip;}(React.PureComponent);Tooltip.propTypes={children:PropTypes.element,withPointer:PropTypes.bool,popover:PropTypes.element,toggleOnPress:PropTypes.bool,height:PropTypes.number,width:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),containerStyle:ViewPropTypes.style,pointerColor:PropTypes.string,onClose:PropTypes.func,onOpen:PropTypes.func,overlayColor:PropTypes.string,withOverlay:PropTypes.bool,backgroundColor:PropTypes.string,highlightColor:PropTypes.string};Tooltip.defaultProps={withOverlay:true,overlayColor:'rgba(250, 250, 250, 0.70)',highlightColor:'transparent',withPointer:true,toggleOnPress:true,height:40,width:150,containerStyle:{},backgroundColor:'#617080',onClose:function onClose(){},onOpen:function onOpen(){}};var styles={container:function container(withOverlay,overlayColor){return{backgroundColor:withOverlay?overlayColor:'transparent',flex:1};}};export{Tooltip};export default withTheme(Tooltip,'Tooltip');","map":{"version":3,"sources":["C:/Users/karth/Documents/RoboticsScoutingTool/node_modules/react-native-elements/src/tooltip/Tooltip.js"],"names":["React","PropTypes","ViewPropTypes","withTheme","ScreenWidth","ScreenHeight","isIOS","Triangle","getTooltipCoordinate","getElementVisibleWidth","Tooltip","state","isVisible","yOffset","xOffset","elementWidth","elementHeight","toggleTooltip","onClose","props","getElementPosition","setState","prevState","wrapWithPress","toggleOnPress","children","getTooltipStyle","height","backgroundColor","width","withPointer","containerStyle","x","y","position","left","top","display","alignItems","justifyContent","flex","borderRadius","padding","renderPointer","tooltipY","pointerColor","pastMiddleLine","borderBottomColor","renderContent","withTooltip","popover","highlightColor","tooltipStyle","overflow","renderedElement","measure","frameOffsetX","frameOffsetY","pageOffsetX","pageOffsetY","StatusBar","currentHeight","setTimeout","withOverlay","overlayColor","onOpen","e","styles","container","PureComponent","propTypes","element","bool","number","oneOfType","string","style","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity, Modal, View, StatusBar } from 'react-native';\n\nimport { ViewPropTypes, withTheme } from '../config';\nimport { ScreenWidth, ScreenHeight, isIOS } from '../helpers';\n\nimport Triangle from './Triangle';\nimport getTooltipCoordinate, {\n  getElementVisibleWidth,\n} from './getTooltipCoordinate';\n\nclass Tooltip extends React.PureComponent {\n  state = {\n    isVisible: false,\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0,\n  };\n\n  renderedElement;\n\n  toggleTooltip = () => {\n    const { onClose } = this.props;\n    this.getElementPosition();\n    this.setState(prevState => {\n      if (prevState.isVisible && !isIOS) {\n        onClose && onClose();\n      }\n\n      return { isVisible: !prevState.isVisible };\n    });\n  };\n\n  wrapWithPress = (toggleOnPress, children) => {\n    if (toggleOnPress) {\n      return (\n        <TouchableOpacity onPress={this.toggleTooltip} activeOpacity={1}>\n          {children}\n        </TouchableOpacity>\n      );\n    }\n\n    return children;\n  };\n\n  getTooltipStyle = () => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const {\n      height,\n      backgroundColor,\n      width,\n      withPointer,\n      containerStyle,\n    } = this.props;\n\n    const { x, y } = getTooltipCoordinate(\n      xOffset,\n      yOffset,\n      elementWidth,\n      elementHeight,\n      ScreenWidth,\n      ScreenHeight,\n      width,\n      height,\n      withPointer\n    );\n\n    return {\n      position: 'absolute',\n      left: x,\n      top: y,\n      width,\n      height,\n      backgroundColor,\n      // default styles\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flex: 1,\n      borderRadius: 10,\n      padding: 10,\n      ...containerStyle,\n    };\n  };\n\n  renderPointer = tooltipY => {\n    const { yOffset, xOffset, elementHeight, elementWidth } = this.state;\n    const { backgroundColor, pointerColor } = this.props;\n    const pastMiddleLine = yOffset > tooltipY;\n\n    return (\n      <View\n        style={{\n          position: 'absolute',\n          top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n          left:\n            xOffset +\n            getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n            7.5,\n        }}\n      >\n        <Triangle\n          style={{ borderBottomColor: pointerColor || backgroundColor }}\n          isDown={pastMiddleLine}\n        />\n      </View>\n    );\n  };\n\n  renderContent = withTooltip => {\n    const { popover, withPointer, toggleOnPress, highlightColor } = this.props;\n\n    if (!withTooltip) {\n      return this.wrapWithPress(toggleOnPress, this.props.children);\n    }\n\n    const { yOffset, xOffset, elementWidth, elementHeight } = this.state;\n    const tooltipStyle = this.getTooltipStyle();\n    return (\n      <View>\n        <View\n          style={{\n            position: 'absolute',\n            top: yOffset,\n            left: xOffset,\n            backgroundColor: highlightColor,\n            overflow: 'visible',\n            width: elementWidth,\n            height: elementHeight,\n          }}\n        >\n          {this.props.children}\n        </View>\n        {withPointer && this.renderPointer(tooltipStyle.top)}\n        <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n          {popover}\n        </View>\n      </View>\n    );\n  };\n\n  componentDidMount() {\n    // wait to compute onLayout values.\n    setTimeout(this.getElementPosition, 500);\n  }\n\n  getElementPosition = () => {\n    this.renderedElement &&\n      this.renderedElement.measure(\n        (\n          frameOffsetX,\n          frameOffsetY,\n          width,\n          height,\n          pageOffsetX,\n          pageOffsetY\n        ) => {\n          this.setState({\n            xOffset: pageOffsetX,\n            yOffset: isIOS\n              ? pageOffsetY\n              : pageOffsetY - StatusBar.currentHeight,\n            elementWidth: width,\n            elementHeight: height,\n          });\n        }\n      );\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const { onClose, withOverlay, overlayColor, onOpen } = this.props;\n\n    return (\n      <View\n        collapsable={false}\n        ref={e => {\n          this.renderedElement = e;\n        }}\n      >\n        {this.renderContent(false)}\n        <Modal\n          animationType=\"fade\"\n          visible={isVisible}\n          transparent\n          onDismiss={onClose}\n          onShow={onOpen}\n          onRequestClose={onClose}\n        >\n          <TouchableOpacity\n            style={styles.container(withOverlay, overlayColor)}\n            onPress={this.toggleTooltip}\n            activeOpacity={1}\n          >\n            {this.renderContent(true)}\n          </TouchableOpacity>\n        </Modal>\n      </View>\n    );\n  }\n}\n\nTooltip.propTypes = {\n  children: PropTypes.element,\n  withPointer: PropTypes.bool,\n  popover: PropTypes.element,\n  toggleOnPress: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  containerStyle: ViewPropTypes.style,\n  pointerColor: PropTypes.string,\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func,\n  overlayColor: PropTypes.string,\n  withOverlay: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  highlightColor: PropTypes.string,\n};\n\nTooltip.defaultProps = {\n  withOverlay: true,\n  overlayColor: 'rgba(250, 250, 250, 0.70)',\n  highlightColor: 'transparent',\n  withPointer: true,\n  toggleOnPress: true,\n  height: 40,\n  width: 150,\n  containerStyle: {},\n  backgroundColor: '#617080',\n  onClose: () => {},\n  onOpen: () => {},\n};\n\nconst styles = {\n  container: (withOverlay, overlayColor) => ({\n    backgroundColor: withOverlay ? overlayColor : 'transparent',\n    flex: 1,\n  }),\n};\n\nexport { Tooltip };\nexport default withTheme(Tooltip, 'Tooltip');\n"]},"metadata":{},"sourceType":"module"}