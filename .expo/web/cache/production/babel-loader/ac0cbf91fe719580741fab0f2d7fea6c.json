{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import _wrapNativeSuper from\"@babel/runtime/helpers/wrapNativeSuper\";export var CodedError=function(_Error){_inherits(CodedError,_Error);function CodedError(code,message){var _this;_classCallCheck(this,CodedError);_this=_possibleConstructorReturn(this,_getPrototypeOf(CodedError).call(this,message));_this.code=code;return _this;}return CodedError;}(_wrapNativeSuper(Error));","map":{"version":3,"sources":["../../src/errors/CodedError.ts"],"names":[],"mappings":"2VAKA,UAAa,CAAA,UAAb,+CAIE,oBAAY,IAAZ,CAA0B,OAA1B,CAAyC,4CACvC,4EAAM,OAAN,GACA,MAAK,IAAL,CAAY,IAAZ,CAFuC,aAGxC,CAPH,qCAAgC,KAAhC","sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}